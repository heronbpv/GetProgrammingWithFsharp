Quick check 36.1 answers:
1 - What’s the preferred type to use in .NET when executing work in the background?
A - A Task. Or more specifically, the type System.Threading.Tasks.Task.

2 - What’s the difference between CPU- and I/O-bound workloads in terms of their activity on a thread?
A - CPU-bound workloads are computations that take a long time to complete, thus blocking other processes waiting for CPU time to be freed. This makes the thread they're in to remain on hold until the computation ends. 
I/O-bound computations, on the other hand, are waiting for a external call to respond to it's request, blocking further processing until said call is answered. In that way, the thread responsible for this process will be left idle until the return is given.

Quick check 36.2 answers:
1 - What extra keyword must you use in async blocks to return a value?
A - The return keyword. Which is just a syntatic sugar for a call to the Return function of the AsyncBuilder class, treated as a reserved word by the F# compiler as part of the Computation Expression functionality!

2 - Do async workflows immediately execute on creation?
A - No, they don't. One must explicitly call a executing function (e.g. Start or RunSynchronously) from the Async module.

Quick check 36.3 answers:
1 - What’s the purpose of the let! keyword?
A - In the context of the Async computation expression (CE for short), it's to await for the result of another asynchronous computation, but to do so asynchronously as well.

2 - When do you need to use the return keyword in F#?
A - Also in the context of the Async CE, at the end of the computation, to wrap it's result inside the Async type.

Quick check 36.4 answers:
1 - What does Async.Parallel do?
A - Combines a collection of async workflows into a single one, a strategy known as Fork/Join.

Quick check 36.5 answers:
1 - How do you convert from Async to Task ?
A - Using the combinators from the Async module: AwaitTask to convert from Task to Async, and StartAsTask to convert from Async to Task.

2 - Name one benefit that Task offers over Async.
A - Better performance at CPU bound computations, and as an extra the ability to report the status of the work in progress.