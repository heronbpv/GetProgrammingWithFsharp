#I @"..\get-programming-fsharp-master\packages"
//Now you try 30.2.2
#r @"FSharp.Data\lib\net40\FSharp.Data.dll"

open FSharp.Data
open System

type Football = CsvProvider< @"..\get-programming-fsharp-master\data\FootballResults.csv", HasHeaders = true>
let data = Football.GetSample().Rows |> Seq.toArray

//@Question: Which three teams won at home the most over the whole season?
data
|> Array.iter (fun game -> printfn "%s" game.``Full Time Result``) //Full time represents who won the game; (D)raw, (A)way, or (H)ome.

data
|> Array.filter (fun game -> game.``Full Time Result``.Equals("H", StringComparison.OrdinalIgnoreCase)) //Search all game where the home team won
|> Array.sortByDescending (fun game -> game.``Full Time Home Goals``)
//|> Array.take 3 //Take 3 here seems to exclude one game, that has the same score as the third one (6-1). Is there another way?
|> Array.groupBy (fun game -> sprintf "%i-%i" game.``Full Time Home Goals`` game.``Full Time Away Goals``) //Let's try grouping first...
|> Array.take 3 //Now I have the three highest scores games. Let's assume that draws appear in the final listing
|> Array.map snd
|> Array.collect id //This sequence of map and collect flattens the second array of games generated by the groupBy.
|> Array.iter (fun game -> 
                printfn "Home Team '%s' vs Away Team '%s'; Score (Home-Away) - %i-%i" game.``Home Team`` game.``Away Team`` game.``Full Time Home Goals`` game.``Full Time Away Goals``)